1.
fr - это гибкая единица измерения, которая рассчитывается исходя из количества доступного 
пространства в grid-контейнере.Важно помнить о том, что по умолчанию "доступное пространство" – 
это не всё пространство контейнера. 
Если какая-то из колонок содержит элемент фиксированного размера или длинное слово, 
которое не может быть перенесено на новую строку, пространство под эту колонку будет выделено до того, 
как начнётся его распределение между всеми колонками.

2. 
html
<div class="container">
   <div class="item item1"></div>
   <div class="item item2"></div>
   <div class="item item3"></div>
   <div class="item item4"></div>
   <div class="item item5"></div>
</div>

css
.container {
   display: grid;
   grid-template-columns: 20% 20% 20% 20% 20%;
}

css
.container {
   display: grid;
   grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
}

css
.container {
   display: grid;
   grid-template-columns: repeat(5, 1fr);
}

3.
auto-fill ЗАПОЛНЯЕТ строку максимально возможным числом колонок. 
Если в строку можно вместить новую колонку, она будет создана с четко заданной шириной, 
потому что это ключевое слово пытается ЗАПОЛНИТЬ строку максимальным числом колонок. 
Новые колонки могут быть пустыми, но они все же будут занимать место в строке.

auto-fit ПОДСТРАИВАЕТ доступные на данный момент колонки под пространство, расширяя их, 
чтобы они могли занять все доступное пространство. Браузер сначала заполняет свободное пространство
дополнительными колонками (как auto-fill), после чего пустые колонки сжимаются.

4.
html
<div class="container">
        <div class="item1"> 1 </div>
        <div class="item2"> 2 </div>
        <div class="item3"> 3 </div>
        <div class="item4"> 4 </div>
        <div class="item5"> 5 </div>
        <div class="item6"> 6 </div>
</div>

css
.container {
    display: grid;
    grid-template-columns: 100px 30% 1fr;
    grid-template-rows: 200px 100px;
    gap: 10px;
}

5. 
 align-self: center;

6.
Grid area - это пространство внутри grid контейнера, в которое может быть помещен один или больше grid элементов. 
Этот элемент может состоять из одной или более grid ячеек.
Свойство grid-area является сокращенным свойством для grid-row-start, grid-column-start, 
grid-row-end и grid-column-end, определяя размер и расположение элемента сетки.

7.
.item-a {
  grid-area: header;
}
.item-b {
  grid-area: main;
}
.item-c {
  grid-area: sidebar;
}
.item-d {
  grid-area: footer;
}

8.
auto-fit

9.
Можно обозначать элементы на сетке по номерам линий. 
В этом случае необходимо следить за тем, где на сетке проходят определённые линии, и помнить о том, 
что последовательность их номеров меняется на противоположную, если сайт отображается для языков, 
которые пишутся справа налево.

Если необходимо, имена линиям можно задать внутри квадратных скобок в списке треков. 
Здесь важно помнить, что именуется линия, а не трек, который следует после неё. 
Назвав линии, можно использовать их имена вместо номеров при позиционировании элементов на сетке.

10. 

grid-template-columns: repeat(12, 1fr);









